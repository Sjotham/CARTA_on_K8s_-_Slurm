# 1) Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: carta
---
# 2) Static hostPath PersistentVolume (cluster-scoped)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: carta-pv2
  labels:
    type: local
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: ""                  # static PV (no dynamic provisioner)
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /root/                  # on the Minikube NODE (not inside the container)
    type: DirectoryOrCreate
---
# 3) PVC in carta namespace (binds to the static PV)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: carta-pvc2
  namespace: carta
spec:
  storageClassName: ""                  # must match PV's ""
  volumeName: carta-pv2                 # bind to the PV above
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# 4) Deployment in carta namespace
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carta-backend
  namespace: carta
  labels:
    app: carta-backend
spec:
  strategy:
    type: Recreate                      # important for RWO volumes
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: carta-backend
  template:
    metadata:
      labels:
        app: carta-backend
    spec:
     # securityContext:
      #  runAsUser: 1000
       # runAsGroup: 1000
     #   fsGroup: 1000
      containers:
        - name: carta-backend
          image: "my-carta-backend:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3002
          volumeMounts:
            - name: carta-storage
              mountPath: /root         # PVC for user data (doesn't hide samples path)
          startupProbe:
            tcpSocket: { port: 3002 }
            failureThreshold: 30
            periodSeconds: 2
          readinessProbe:
            tcpSocket: { port: 3002 }
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            tcpSocket: { port: 3002 }
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 3
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: "1"
              memory: 2Gi
      volumes:
        - name: carta-storage
          persistentVolumeClaim:
            claimName: carta-pvc2
---
# 5) NodePort Service (easy access via browser)
apiVersion: v1
kind: Service
metadata:
  name: carta-backend
  namespace: carta
  labels:
    app: carta-backend
spec:
  type: NodePort
  selector:
    app: carta-backend
  ports:
    - name: http
      port: 3002
      targetPort: 3002
      nodePort: 30080
